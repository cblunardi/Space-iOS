//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap { Locale(identifier: $0) } ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)

  /// Find first language and bundle for which the table exists
  fileprivate static func localeBundle(tableName: String, preferredLanguages: [String]) -> (Foundation.Locale, Foundation.Bundle)? {
    // Filter preferredLanguages to localizations, use first locale
    var languages = preferredLanguages
      .map { Locale(identifier: $0) }
      .prefix(1)
      .flatMap { locale -> [String] in
        if hostingBundle.localizations.contains(locale.identifier) {
          if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
            return [locale.identifier, language]
          } else {
            return [locale.identifier]
          }
        } else if let language = locale.languageCode, hostingBundle.localizations.contains(language) {
          return [language]
        } else {
          return []
        }
      }

    // If there's no languages, use development language as backstop
    if languages.isEmpty {
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages = [developmentLocalization]
      }
    } else {
      // Insert Base as second item (between locale identifier and languageCode)
      languages.insert("Base", at: 1)

      // Add development language as backstop
      if let developmentLocalization = hostingBundle.developmentLocalization {
        languages.append(developmentLocalization)
      }
    }

    // Find first language for which table exists
    // Note: key might not exist in chosen language (in that case, key will be shown)
    for language in languages {
      if let lproj = hostingBundle.url(forResource: language, withExtension: "lproj"),
         let lbundle = Bundle(url: lproj)
      {
        let strings = lbundle.url(forResource: tableName, withExtension: "strings")
        let stringsdict = lbundle.url(forResource: tableName, withExtension: "stringsdict")

        if strings != nil || stringsdict != nil {
          return (Locale(identifier: language), lbundle)
        }
      }
    }

    // If table is available in main bundle, don't look for localized resources
    let strings = hostingBundle.url(forResource: tableName, withExtension: "strings", subdirectory: nil, localization: nil)
    let stringsdict = hostingBundle.url(forResource: tableName, withExtension: "stringsdict", subdirectory: nil, localization: nil)

    if strings != nil || stringsdict != nil {
      return (applicationLocale, hostingBundle)
    }

    // If table is not found for requested languages, key will be shown
    return nil
  }

  /// Load string from Info.plist file
  fileprivate static func infoPlistString(path: [String], key: String) -> String? {
    var dict = hostingBundle.infoDictionary
    for step in path {
      guard let obj = dict?[step] as? [String: Any] else { return nil }
      dict = obj
    }
    return dict?[key] as? String
  }

  static func validate() throws {
    try intern.validate()
  }

  #if os(iOS) || os(tvOS)
  /// This `R.storyboard` struct is generated, and contains static references to 6 storyboards.
  struct storyboard {
    /// Storyboard `About`.
    static let about = _R.storyboard.about()
    /// Storyboard `Acknowledgements`.
    static let acknowledgements = _R.storyboard.acknowledgements()
    /// Storyboard `Catalog`.
    static let catalog = _R.storyboard.catalog()
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    /// Storyboard `MonthCatalog`.
    static let monthCatalog = _R.storyboard.monthCatalog()

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "About", bundle: ...)`
    static func about(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.about)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Acknowledgements", bundle: ...)`
    static func acknowledgements(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.acknowledgements)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Catalog", bundle: ...)`
    static func catalog(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.catalog)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIStoryboard(name: "MonthCatalog", bundle: ...)`
    static func monthCatalog(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.monthCatalog)
    }
    #endif

    fileprivate init() {}
  }
  #endif

  /// This `R.color` struct is generated, and contains static references to 7 colors.
  struct color {
    /// Color `AccentColor`.
    static let accentColor = Rswift.ColorResource(bundle: R.hostingBundle, name: "AccentColor")
    /// Color `Disabled`.
    static let disabled = Rswift.ColorResource(bundle: R.hostingBundle, name: "Disabled")
    /// Color `Palette-1`.
    static let palette1 = Rswift.ColorResource(bundle: R.hostingBundle, name: "Palette-1")
    /// Color `Palette-2`.
    static let palette2 = Rswift.ColorResource(bundle: R.hostingBundle, name: "Palette-2")
    /// Color `Palette-3`.
    static let palette3 = Rswift.ColorResource(bundle: R.hostingBundle, name: "Palette-3")
    /// Color `Palette-4`.
    static let palette4 = Rswift.ColorResource(bundle: R.hostingBundle, name: "Palette-4")
    /// Color `Palette-5`.
    static let palette5 = Rswift.ColorResource(bundle: R.hostingBundle, name: "Palette-5")

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func accentColor(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.accentColor, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Disabled", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func disabled(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.disabled, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Palette-1", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func palette1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.palette1, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Palette-2", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func palette2(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.palette2, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Palette-3", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func palette3(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.palette3, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Palette-4", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func palette4(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.palette4, compatibleWith: traitCollection)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UIColor(named: "Palette-5", bundle: ..., traitCollection: ...)`
    @available(tvOS 11.0, *)
    @available(iOS 11.0, *)
    static func palette5(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIColor? {
      return UIKit.UIColor(resource: R.color.palette5, compatibleWith: traitCollection)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "AccentColor", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func accentColor(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.accentColor.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Disabled", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func disabled(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.disabled.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Palette-1", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func palette1(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.palette1.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Palette-2", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func palette2(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.palette2.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Palette-3", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func palette3(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.palette3.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Palette-4", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func palette4(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.palette4.name)
    }
    #endif

    #if os(watchOS)
    /// `UIColor(named: "Palette-5", bundle: ..., traitCollection: ...)`
    @available(watchOSApplicationExtension 4.0, *)
    static func palette5(_: Void = ()) -> UIKit.UIColor? {
      return UIKit.UIColor(named: R.color.palette5.name)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `EarthMoonAnimation.json`.
    static let earthMoonAnimationJson = Rswift.FileResource(bundle: R.hostingBundle, name: "EarthMoonAnimation", pathExtension: "json")

    /// `bundle.url(forResource: "EarthMoonAnimation", withExtension: "json")`
    static func earthMoonAnimationJson(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.earthMoonAnimationJson
      return fileResource.bundle.url(forResource: fileResource)
    }

    fileprivate init() {}
  }

  /// This `R.image` struct is generated, and contains static references to 1 images.
  struct image {
    /// Image `EarthMoonAnimatio-frame-1`.
    static let earthMoonAnimatioFrame1 = Rswift.ImageResource(bundle: R.hostingBundle, name: "EarthMoonAnimatio-frame-1")

    #if os(iOS) || os(tvOS)
    /// `UIImage(named: "EarthMoonAnimatio-frame-1", bundle: ..., traitCollection: ...)`
    static func earthMoonAnimatioFrame1(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.earthMoonAnimatioFrame1, compatibleWith: traitCollection)
    }
    #endif

    fileprivate init() {}
  }

  /// This `R.info` struct is generated, and contains static references to 1 properties.
  struct info {
    struct uiApplicationSceneManifest {
      static let _key = "UIApplicationSceneManifest"
      static let uiApplicationSupportsMultipleScenes = false

      struct uiSceneConfigurations {
        static let _key = "UISceneConfigurations"

        struct uiWindowSceneSessionRoleApplication {
          struct defaultConfiguration {
            static let _key = "Default Configuration"
            static let uiSceneConfigurationName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneConfigurationName") ?? "Default Configuration"
            static let uiSceneDelegateClassName = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneDelegateClassName") ?? "$(PRODUCT_MODULE_NAME).SceneDelegate"
            static let uiSceneStoryboardFile = infoPlistString(path: ["UIApplicationSceneManifest", "UISceneConfigurations", "UIWindowSceneSessionRoleApplication", "Default Configuration"], key: "UISceneStoryboardFile") ?? "Main"

            fileprivate init() {}
          }

          fileprivate init() {}
        }

        fileprivate init() {}
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  /// This `R.nib` struct is generated, and contains static references to 4 nibs.
  struct nib {
    /// Nib `AboutHeaderCell`.
    static let aboutHeaderCell = _R.nib._AboutHeaderCell()
    /// Nib `CatalogDayCell`.
    static let catalogDayCell = _R.nib._CatalogDayCell()
    /// Nib `CatalogMonthCell`.
    static let catalogMonthCell = _R.nib._CatalogMonthCell()
    /// Nib `TitleHeaderView`.
    static let titleHeaderView = _R.nib._TitleHeaderView()

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "AboutHeaderCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.aboutHeaderCell) instead")
    static func aboutHeaderCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.aboutHeaderCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CatalogDayCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.catalogDayCell) instead")
    static func catalogDayCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.catalogDayCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "CatalogMonthCell", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.catalogMonthCell) instead")
    static func catalogMonthCell(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.catalogMonthCell)
    }
    #endif

    #if os(iOS) || os(tvOS)
    /// `UINib(name: "TitleHeaderView", in: bundle)`
    @available(*, deprecated, message: "Use UINib(resource: R.nib.titleHeaderView) instead")
    static func titleHeaderView(_: Void = ()) -> UIKit.UINib {
      return UIKit.UINib(resource: R.nib.titleHeaderView)
    }
    #endif

    static func aboutHeaderCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AboutHeaderCell? {
      return R.nib.aboutHeaderCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AboutHeaderCell
    }

    static func catalogDayCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CatalogDayCell? {
      return R.nib.catalogDayCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CatalogDayCell
    }

    static func catalogMonthCell(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CatalogMonthCell? {
      return R.nib.catalogMonthCell.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CatalogMonthCell
    }

    static func titleHeaderView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TitleHeaderView? {
      return R.nib.titleHeaderView.instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TitleHeaderView
    }

    fileprivate init() {}
  }

  /// This `R.reuseIdentifier` struct is generated, and contains static references to 4 reuse identifiers.
  struct reuseIdentifier {
    /// Reuse identifier `AboutHeaderCell`.
    static let aboutHeaderCell: Rswift.ReuseIdentifier<AboutHeaderCell> = Rswift.ReuseIdentifier(identifier: "AboutHeaderCell")
    /// Reuse identifier `CatalogDayCell`.
    static let catalogDayCell: Rswift.ReuseIdentifier<CatalogDayCell> = Rswift.ReuseIdentifier(identifier: "CatalogDayCell")
    /// Reuse identifier `CatalogMonthCell`.
    static let catalogMonthCell: Rswift.ReuseIdentifier<CatalogMonthCell> = Rswift.ReuseIdentifier(identifier: "CatalogMonthCell")
    /// Reuse identifier `TitleHeaderView`.
    static let titleHeaderView: Rswift.ReuseIdentifier<TitleHeaderView> = Rswift.ReuseIdentifier(identifier: "TitleHeaderView")

    fileprivate init() {}
  }

  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.localizable` struct is generated, and contains static references to 15 localization keys.
    struct localizable {
      /// en translation: About
      ///
      /// Locales: en, it, pt-BR
      static let aboutTitle = Rswift.StringResource(key: "about-title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it", "pt-BR"], comment: nil)
      /// en translation: About DSCOVR
      ///
      /// Locales: en, it, pt-BR
      static let aboutOptionDscovrTitle = Rswift.StringResource(key: "about-option-dscovr-title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it", "pt-BR"], comment: nil)
      /// en translation: About EPIC
      ///
      /// Locales: en, it, pt-BR
      static let aboutOptionEpicTitle = Rswift.StringResource(key: "about-option-epic-title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it", "pt-BR"], comment: nil)
      /// en translation: Acknowledgements
      ///
      /// Locales: en, it, pt-BR
      static let aboutOptionAcknowledgementsTitle = Rswift.StringResource(key: "about-option-acknowledgements-title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it", "pt-BR"], comment: nil)
      /// en translation: Acknowledgements
      ///
      /// Locales: en, it, pt-BR
      static let acknowledgementsTitle = Rswift.StringResource(key: "acknowledgements-title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it", "pt-BR"], comment: nil)
      /// en translation: AirBnB for Lottie, a native animation renderer.
      ///
      /// Locales: en, it, pt-BR
      static let acknowledgementsLottie = Rswift.StringResource(key: "acknowledgements-lottie", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it", "pt-BR"], comment: nil)
      /// en translation: Catalog
      ///
      /// Locales: en, it, pt-BR
      static let catalogTitle = Rswift.StringResource(key: "catalog-title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it", "pt-BR"], comment: nil)
      /// en translation: NASA, NOAA and NASA ASDC for granting free and open usage of EPIC onboard NOAA's DSCOVR spacecraft.
      ///
      /// Locales: en, it, pt-BR
      static let acknowledgementsEpic = Rswift.StringResource(key: "acknowledgements-epic", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it", "pt-BR"], comment: nil)
      /// en translation: NASA, for granting free and open usage of the NASA Open APIs.
      ///
      /// Locales: en, it, pt-BR
      static let acknowledgementsNasa = Rswift.StringResource(key: "acknowledgements-nasa", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it", "pt-BR"], comment: nil)
      /// en translation: Photo3idea_studio and FlatIcon, for the amazing App Icon
      ///
      /// Locales: en, it, pt-BR
      static let acknowledgementsLogo = Rswift.StringResource(key: "acknowledgements-logo", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it", "pt-BR"], comment: nil)
      /// en translation: Space is build with Swift and is available open-source
      ///
      /// Locales: en, it, pt-BR
      static let aboutFooterOpenSourceTitle = Rswift.StringResource(key: "about-footer-open-source-title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it", "pt-BR"], comment: nil)
      /// en translation: Swipe left or right to rotate
      ///
      /// Locales: en, it, pt-BR
      static let mainHintText = Rswift.StringResource(key: "main-hint-text", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it", "pt-BR"], comment: nil)
      /// en translation: The Open Source Community for Vapor, a Web Framework for Swift.
      ///
      /// Locales: en, it, pt-BR
      static let acknowledgementsVapor = Rswift.StringResource(key: "acknowledgements-vapor", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it", "pt-BR"], comment: nil)
      /// en translation: This is a hobby project maintened by Caio Brigagão Lunardi
      ///
      /// Locales: en, it, pt-BR
      static let aboutFooterAuthorTitle = Rswift.StringResource(key: "about-footer-author-title", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it", "pt-BR"], comment: nil)
      /// en translation: Wan Souza, for the amazing Earth-Moon Loading Animation.
      ///
      /// Locales: en, it, pt-BR
      static let acknowledgementsAnimation = Rswift.StringResource(key: "acknowledgements-animation", tableName: "Localizable", bundle: R.hostingBundle, locales: ["en", "it", "pt-BR"], comment: nil)

      /// en translation: About
      ///
      /// Locales: en, it, pt-BR
      static func aboutTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("about-title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "about-title"
        }

        return NSLocalizedString("about-title", bundle: bundle, comment: "")
      }

      /// en translation: About DSCOVR
      ///
      /// Locales: en, it, pt-BR
      static func aboutOptionDscovrTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("about-option-dscovr-title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "about-option-dscovr-title"
        }

        return NSLocalizedString("about-option-dscovr-title", bundle: bundle, comment: "")
      }

      /// en translation: About EPIC
      ///
      /// Locales: en, it, pt-BR
      static func aboutOptionEpicTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("about-option-epic-title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "about-option-epic-title"
        }

        return NSLocalizedString("about-option-epic-title", bundle: bundle, comment: "")
      }

      /// en translation: Acknowledgements
      ///
      /// Locales: en, it, pt-BR
      static func aboutOptionAcknowledgementsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("about-option-acknowledgements-title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "about-option-acknowledgements-title"
        }

        return NSLocalizedString("about-option-acknowledgements-title", bundle: bundle, comment: "")
      }

      /// en translation: Acknowledgements
      ///
      /// Locales: en, it, pt-BR
      static func acknowledgementsTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("acknowledgements-title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "acknowledgements-title"
        }

        return NSLocalizedString("acknowledgements-title", bundle: bundle, comment: "")
      }

      /// en translation: AirBnB for Lottie, a native animation renderer.
      ///
      /// Locales: en, it, pt-BR
      static func acknowledgementsLottie(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("acknowledgements-lottie", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "acknowledgements-lottie"
        }

        return NSLocalizedString("acknowledgements-lottie", bundle: bundle, comment: "")
      }

      /// en translation: Catalog
      ///
      /// Locales: en, it, pt-BR
      static func catalogTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("catalog-title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "catalog-title"
        }

        return NSLocalizedString("catalog-title", bundle: bundle, comment: "")
      }

      /// en translation: NASA, NOAA and NASA ASDC for granting free and open usage of EPIC onboard NOAA's DSCOVR spacecraft.
      ///
      /// Locales: en, it, pt-BR
      static func acknowledgementsEpic(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("acknowledgements-epic", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "acknowledgements-epic"
        }

        return NSLocalizedString("acknowledgements-epic", bundle: bundle, comment: "")
      }

      /// en translation: NASA, for granting free and open usage of the NASA Open APIs.
      ///
      /// Locales: en, it, pt-BR
      static func acknowledgementsNasa(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("acknowledgements-nasa", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "acknowledgements-nasa"
        }

        return NSLocalizedString("acknowledgements-nasa", bundle: bundle, comment: "")
      }

      /// en translation: Photo3idea_studio and FlatIcon, for the amazing App Icon
      ///
      /// Locales: en, it, pt-BR
      static func acknowledgementsLogo(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("acknowledgements-logo", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "acknowledgements-logo"
        }

        return NSLocalizedString("acknowledgements-logo", bundle: bundle, comment: "")
      }

      /// en translation: Space is build with Swift and is available open-source
      ///
      /// Locales: en, it, pt-BR
      static func aboutFooterOpenSourceTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("about-footer-open-source-title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "about-footer-open-source-title"
        }

        return NSLocalizedString("about-footer-open-source-title", bundle: bundle, comment: "")
      }

      /// en translation: Swipe left or right to rotate
      ///
      /// Locales: en, it, pt-BR
      static func mainHintText(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("main-hint-text", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "main-hint-text"
        }

        return NSLocalizedString("main-hint-text", bundle: bundle, comment: "")
      }

      /// en translation: The Open Source Community for Vapor, a Web Framework for Swift.
      ///
      /// Locales: en, it, pt-BR
      static func acknowledgementsVapor(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("acknowledgements-vapor", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "acknowledgements-vapor"
        }

        return NSLocalizedString("acknowledgements-vapor", bundle: bundle, comment: "")
      }

      /// en translation: This is a hobby project maintened by Caio Brigagão Lunardi
      ///
      /// Locales: en, it, pt-BR
      static func aboutFooterAuthorTitle(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("about-footer-author-title", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "about-footer-author-title"
        }

        return NSLocalizedString("about-footer-author-title", bundle: bundle, comment: "")
      }

      /// en translation: Wan Souza, for the amazing Earth-Moon Loading Animation.
      ///
      /// Locales: en, it, pt-BR
      static func acknowledgementsAnimation(preferredLanguages: [String]? = nil) -> String {
        guard let preferredLanguages = preferredLanguages else {
          return NSLocalizedString("acknowledgements-animation", bundle: hostingBundle, comment: "")
        }

        guard let (_, bundle) = localeBundle(tableName: "Localizable", preferredLanguages: preferredLanguages) else {
          return "acknowledgements-animation"
        }

        return NSLocalizedString("acknowledgements-animation", bundle: bundle, comment: "")
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }

  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }

    fileprivate init() {}
  }

  fileprivate class Class {}

  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    #if os(iOS) || os(tvOS)
    try storyboard.validate()
    #endif
  }

  #if os(iOS) || os(tvOS)
  struct nib {
    struct _AboutHeaderCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = AboutHeaderCell

      let bundle = R.hostingBundle
      let identifier = "AboutHeaderCell"
      let name = "AboutHeaderCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> AboutHeaderCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? AboutHeaderCell
      }

      fileprivate init() {}
    }

    struct _CatalogDayCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CatalogDayCell

      let bundle = R.hostingBundle
      let identifier = "CatalogDayCell"
      let name = "CatalogDayCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CatalogDayCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CatalogDayCell
      }

      fileprivate init() {}
    }

    struct _CatalogMonthCell: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = CatalogMonthCell

      let bundle = R.hostingBundle
      let identifier = "CatalogMonthCell"
      let name = "CatalogMonthCell"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> CatalogMonthCell? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? CatalogMonthCell
      }

      fileprivate init() {}
    }

    struct _TitleHeaderView: Rswift.NibResourceType, Rswift.ReuseIdentifierType {
      typealias ReusableType = TitleHeaderView

      let bundle = R.hostingBundle
      let identifier = "TitleHeaderView"
      let name = "TitleHeaderView"

      func firstView(owner ownerOrNil: AnyObject?, options optionsOrNil: [UINib.OptionsKey : Any]? = nil) -> TitleHeaderView? {
        return instantiate(withOwner: ownerOrNil, options: optionsOrNil)[0] as? TitleHeaderView
      }

      fileprivate init() {}
    }

    fileprivate init() {}
  }
  #endif

  #if os(iOS) || os(tvOS)
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      #if os(iOS) || os(tvOS)
      try about.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try acknowledgements.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try catalog.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try launchScreen.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try main.validate()
      #endif
      #if os(iOS) || os(tvOS)
      try monthCatalog.validate()
      #endif
    }

    #if os(iOS) || os(tvOS)
    struct about: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AboutViewController

      let aboutViewController = StoryboardViewControllerResource<AboutViewController>(identifier: "AboutViewController")
      let bundle = R.hostingBundle
      let name = "About"

      func aboutViewController(_: Void = ()) -> AboutViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: aboutViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.about().aboutViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'aboutViewController' could not be loaded from storyboard 'About' as 'AboutViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct acknowledgements: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = AcknowledgementsViewController

      let acknowledgementsViewController = StoryboardViewControllerResource<AcknowledgementsViewController>(identifier: "AcknowledgementsViewController")
      let bundle = R.hostingBundle
      let name = "Acknowledgements"

      func acknowledgementsViewController(_: Void = ()) -> AcknowledgementsViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: acknowledgementsViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "AccentColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AccentColor' is used in storyboard 'Acknowledgements', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Palette-3", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Palette-3' is used in storyboard 'Acknowledgements', but couldn't be loaded.") }
        }
        if _R.storyboard.acknowledgements().acknowledgementsViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'acknowledgementsViewController' could not be loaded from storyboard 'Acknowledgements' as 'AcknowledgementsViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct catalog: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = CatalogViewController

      let bundle = R.hostingBundle
      let catalogViewController = StoryboardViewControllerResource<CatalogViewController>(identifier: "CatalogViewController")
      let name = "Catalog"

      func catalogViewController(_: Void = ()) -> CatalogViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: catalogViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.catalog().catalogViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'catalogViewController' could not be loaded from storyboard 'Catalog' as 'CatalogViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController

      let bundle = R.hostingBundle
      let launchScreen = StoryboardViewControllerResource<UIKit.UIViewController>(identifier: "LaunchScreen")
      let name = "LaunchScreen"

      func launchScreen(_: Void = ()) -> UIKit.UIViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: launchScreen)
      }

      static func validate() throws {
        if UIKit.UIImage(named: "EarthMoonAnimatio-frame-1", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'EarthMoonAnimatio-frame-1' is used in storyboard 'LaunchScreen', but couldn't be loaded.") }
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.launchScreen().launchScreen() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'launchScreen' could not be loaded from storyboard 'LaunchScreen' as 'UIKit.UIViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct main: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MainViewController

      let bundle = R.hostingBundle
      let mainViewController = StoryboardViewControllerResource<MainViewController>(identifier: "MainViewController")
      let name = "Main"

      func mainViewController(_: Void = ()) -> MainViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: mainViewController)
      }

      static func validate() throws {
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "calendar.circle") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'calendar.circle' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 13.0, *) { if UIKit.UIImage(systemName: "info.circle") == nil { throw Rswift.ValidationError(description: "[R.swift] System image named 'info.circle' is used in storyboard 'Main', but couldn't be loaded.") } }
        if #available(iOS 11.0, tvOS 11.0, *) {
          if UIKit.UIColor(named: "AccentColor", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'AccentColor' is used in storyboard 'Main', but couldn't be loaded.") }
          if UIKit.UIColor(named: "Palette-2", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Color named 'Palette-2' is used in storyboard 'Main', but couldn't be loaded.") }
        }
        if _R.storyboard.main().mainViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'mainViewController' could not be loaded from storyboard 'Main' as 'MainViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    #if os(iOS) || os(tvOS)
    struct monthCatalog: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = MonthCatalogViewController

      let bundle = R.hostingBundle
      let monthCatalogViewController = StoryboardViewControllerResource<MonthCatalogViewController>(identifier: "MonthCatalogViewController")
      let name = "MonthCatalog"

      func monthCatalogViewController(_: Void = ()) -> MonthCatalogViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: monthCatalogViewController)
      }

      static func validate() throws {
        if #available(iOS 11.0, tvOS 11.0, *) {
        }
        if _R.storyboard.monthCatalog().monthCatalogViewController() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'monthCatalogViewController' could not be loaded from storyboard 'MonthCatalog' as 'MonthCatalogViewController'.") }
      }

      fileprivate init() {}
    }
    #endif

    fileprivate init() {}
  }
  #endif

  fileprivate init() {}
}
